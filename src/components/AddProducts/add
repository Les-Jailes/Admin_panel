import React, { useState } from "react";
import style from "./page.module.css";
import InputField from "./InputField";
import TextAreaField from "./TextAreaField";
import SelectField from "./SelectField";
import CheckboxWithQuantity from "./CheckboxWithQuantity";
import ImageButton from "./ImageButton";
import DeleteButton from "./DeleteButton";
import { AiOutlinePlus } from "react-icons/ai";
import HandleDescriptionChange from "./handlers/HandleDescriptionChange";
import HandleInputChange from "./handlers/HandleInputChange";
import HandleCategoriaChange from "./handlers/HandleCategoriaChange";
import HandleSizeChange from "./handlers/HandleSizeChange";
import HandleQuantityChange from "./handlers/HandleQuantityChange";
import HandleImageChange from "./handlers/HandleImageChange";
import HandleAddImage from "./handlers/HandleAddImage";
import HandleDeleteImage from "./handlers/HandleDeleteImage";
import GetDefaultSize from "./utils/GetDefaultSize";
import GetDefaultTypes from "./utils/GetDefaultTypes";
import UseEffect from "./effects/UseEffect";
import API from "../Api/api";

export default function AddProductForm() {
  const [sizes, setSizes] = useState([]);
  const [formData, setFormData] = useState({
    code: "",
    name: "",
    price: "",
    category: "",
    type: "",
    color: "",
    size: [],
    images: [""],
    description: "",
  });

  const [description, setDescription] = useState("");

  UseEffect(formData, setSizes);

  return (
    <div className="pageContainer">
      <form className={style.form}>
        <h1>Add Product</h1>
        <InputField
          label="Code"
          type="number"
          name="code"
          value={formData.code}
          onChange={(e) => HandleInputChange(e, formData, setFormData)}
        />
        <InputField
          label="Name"
          type="text"
          name="name"
          value={formData.name}
          onChange={(e) => HandleInputChange(e, formData, setFormData)}
        />
        <TextAreaField
          label="Description"
          name="description"
          value={description}
          onChange={(e) => HandleDescriptionChange(e, setDescription)}
        />
        <InputField
          label="Price"
          type="number"
          name="price"
          value={formData.price}
          onChange={(e) => HandleInputChange(e, formData, setFormData)}
        />
        <SelectField
          label="Categoria"
          name="categoria"
          value={formData.category}
          onChange={(e) =>
            HandleCategoriaChange(e, formData, setFormData, GetDefaultSize)
          }
          options={["Select a category", "Women", "Men", "Boy", "Girl"]}
        />
        <SelectField
          label="Type"
          name="type"
          value={formData.type}
          onChange={(e) => HandleInputChange(e, formData, setFormData)}
          options={GetDefaultTypes(formData.category)}
        />
        <InputField
          label="Color"
          type="color"
          name="color"
          value={formData.color}
          onChange={(e) => HandleInputChange(e, formData, setFormData)}
        />
        {formData.category &&
          GetDefaultSize(formData.category).map((size) => (
            <CheckboxWithQuantity
              key={size}
              size={size}
              checked={formData.size.some((sizeObj) => sizeObj.size === size)}
              onChange={(e) => HandleSizeChange(e, formData, setFormData)}
              quantity={
                formData.size.find((sizeObj) => sizeObj.size === size)
                  ?.quantity || ""
              }
              onQuantityChange={(e) =>
                HandleQuantityChange(e, formData, setFormData, size)
              }
            />
          ))}
        <div className="inputImage">
          <label className={style.label}>Image(s)</label>
          <div className="image-path-container">
            <div className="image-button-container">
              {formData.images.map((image, index) => (
                <div key={index} className="image-button-wrapper">
                  <ImageButton
                    index={index}
                    value={image}
                    onChange={(index, value) =>
                      HandleImageChange(index, value, formData, setFormData)
                    }
                  />
                </div>
              ))}
            </div>
            {formData.images.length > 0 && (
              <DeleteButton
                index={formData.images.length - 1}
                onClick={(index) =>
                  HandleDeleteImage(index, formData, setFormData)
                }
              />
            )}
            <button
              className="plusButton"
              type="button"
              onClick={() => HandleAddImage(formData, setFormData)}
            >
              <AiOutlinePlus size={18} />
            </button>
          </div>
        </div>
        <button
          className={`${style.button} button`}
          type="button"
          onClick={(event) => submit(event, formData, sizes)}
        >
          Add
        </button>
      </form>
    </div>
  );
}

async function submit(event, formData, sizes) {
  event.preventDefault();
  const producForm = {
    code: formData.code,
    name: formData.name,
    price: formData.price,
    category: formData.category,
    type: formData.type,
    color: formData.color,
    size: sizes,
    images: formData.images,
    description: formData.description,
  };
  try {
    const response = await API.post("/product", producForm);
    console.log(response.status, response.data.token);
  } catch (error) {
    console.error("Axios Error:", error);
  }
}